""" 
I have a game with following rules:

There's a 3x3 grid with 8 cubes and a blank space.
A cube's setting can be identified by a pair of number from 1 to 6. The blank space is represented by 0.
e.g (1,2) represents a cube with 1 on its top face and 2 on its front face.
The goal is to move the cubes around to reach a target configuration.
The cubes can be moved in four directions: up, down, left, and right.
The game is won when the grid is in the target configuration.

here's moves dictionary:

up = {(1,2):(2,6), (1,3):(3,6), (1,4):(4,6), (1,5):(5,6), 
      (2,1):(1,5), (2,3):(3,5), (2,4):(4,5), (2,6):(6,5), 
      (3,1):(1,4), (3,2):(2,4), (3,5):(5,4), (3,6):(6,4), 
      (4,1):(1,3), (4,2):(2,3), (4,5):(5,3), (4,6):(6,3), 
      (5,1):(1,2), (5,3):(3,2), (5,6):(6,2), (5,4):(4,2), 
      (6,2):(2,1), (6,3):(3,1), (6,4):(4,1), (6,5):(5,1)} 

down = {(1,2):(5,1), (1,3):(4,1), (1,4):(3,1), (1,5):(2,1), 
      (2,1):(6,2), (2,3):(4,2), (2,4):(3,2), (2,6):(1,2), 
      (3,1):(6,3), (3,2):(5,3), (3,5):(2,3), (3,6):(1,3), 
      (4,1):(6,4), (4,2):(5,4), (4,5):(2,4), (4,6):(1,4), 
      (5,1):(6,5), (5,3):(4,5), (5,6):(1,5), (5,4):(3,5), 
      (6,2):(5,6), (6,3):(4,6), (6,4):(3,6), (6,5):(2,6) }

lft =  {(1,2):(3,2), (1,3):(5,3), (1,4):(2,4), (1,5):(4,5), 
      (2,1):(4,1), (2,3):(1,3), (2,4):(6,4), (2,6):(3,6), 
      (3,1):(2,1), (3,2):(6,2), (3,5):(1,5), (3,6):(5,6), 
      (4,1):(5,1), (4,2):(1,2), (4,5):(6,5), (4,6):(2,6), 
      (5,1):(3,1), (5,3):(6,3), (5,6):(4,6), (5,4):(1,4), 
      (6,2):(4,2), (6,3):(2,3), (6,4):(5,4), (6,5):(3,5) }

rgt = {(1,2):(4,2), (1,3):(2,3), (1,4):(5,4), (1,5):(3,5), 
      (2,1):(3,1), (2,3):(6,3), (2,4):(1,4), (2,6):(4,6), 
      (3,1):(5,1), (3,2):(1,2), (3,5):(6,5), (3,6):(2,6), 
      (4,1):(2,1), (4,2):(6,2), (4,5):(1,5), (4,6):(5,6), 
      (5,1):(4,1), (5,3):(1,3), (5,6):(3,6), (5,4):(6,4), 
      (6,2):(3,1), (6,3):(5,3), (6,4):(2,4), (6,5):(4,5) }

e.g. if the current configuration is (1,2) and the move is up, the new configuration will be (2,6)

I have to write a function that takes the starting configuration and the target configuration and returns a list of moves to reach the target configuration.

"""

from collections import deque

up = {(1,2):(2,6), (1,3):(3,6), (1,4):(4,6), (1,5):(5,6), 
      (2,1):(1,5), (2,3):(3,5), (2,4):(4,5), (2,6):(6,5), 
      (3,1):(1,4), (3,2):(2,4), (3,5):(5,4), (3,6):(6,4), 
      (4,1):(1,3), (4,2):(2,3), (4,5):(5,3), (4,6):(6,3), 
      (5,1):(1,2), (5,3):(3,2), (5,6):(6,2), (5,4):(4,2), 
      (6,2):(2,1), (6,3):(3,1), (6,4):(4,1), (6,5):(5,1)} 

down = {(1,2):(5,1), (1,3):(4,1), (1,4):(3,1), (1,5):(2,1), 
      (2,1):(6,2), (2,3):(4,2), (2,4):(3,2), (2,6):(1,2), 
      (3,1):(6,3), (3,2):(5,3), (3,5):(2,3), (3,6):(1,3), 
      (4,1):(6,4), (4,2):(5,4), (4,5):(2,4), (4,6):(1,4), 
      (5,1):(6,5), (5,3):(4,5), (5,6):(1,5), (5,4):(3,5), 
      (6,2):(5,6), (6,3):(4,6), (6,4):(3,6), (6,5):(2,6) }

lft =  {(1,2):(3,2), (1,3):(5,3), (1,4):(2,4), (1,5):(4,5), 
      (2,1):(4,1), (2,3):(1,3), (2,4):(6,4), (2,6):(3,6), 
      (3,1):(2,1), (3,2):(6,2), (3,5):(1,5), (3,6):(5,6), 
      (4,1):(5,1), (4,2):(1,2), (4,5):(6,5), (4,6):(2,6), 
      (5,1):(3,1), (5,3):(6,3), (5,6):(4,6), (5,4):(1,4), 
      (6,2):(4,2), (6,3):(2,3), (6,4):(5,4), (6,5):(3,5) }

rgt = {(1,2):(4,2), (1,3):(2,3), (1,4):(5,4), (1,5):(3,5), 
      (2,1):(3,1), (2,3):(6,3), (2,4):(1,4), (2,6):(4,6), 
      (3,1):(5,1), (3,2):(1,2), (3,5):(6,5), (3,6):(2,6), 
      (4,1):(2,1), (4,2):(6,2), (4,5):(1,5), (4,6):(5,6), 
      (5,1):(4,1), (5,3):(1,3), (5,6):(3,6), (5,4):(6,4), 
      (6,2):(3,1), (6,3):(5,3), (6,4):(2,4), (6,5):(4,5)}

def get_path(start_config, target_config, moves):
    visited = set()
    queue = deque([(start_config, [])])

    while queue:
        current_config, path = queue.popleft()
        if current_config == target_config:
            return path
        if current_config in visited:
            continue
        visited.add(current_config)



    

      
